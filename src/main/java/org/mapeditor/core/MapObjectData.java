/*-
 * #%L
 * libtiled
 * %%
 * Copyright (C) 2004 - 2019 Thorbj√∏rn Lindeijer <thorbjorn@lindeijer.nl>
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.03.13 at 11:56:22 PM GMT 
//

package org.mapeditor.core;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import lombok.Data;

/**
 * While tile layers are very suitable for anything repetitive<br>
 * aligned to the tile grid, sometimes you want to annotate your<br>
 * map with other information, not necessarily aligned to the grid.<br>
 * Hence the objects have their coordinates and size in pixels, but<br>
 * you can still easily align that to the grid when you want to.<br>
 * <br>
 * You generally use objects to add custom information to your tile<br>
 * map, such as spawn points, warps, exits, etc.<br>
 * <br>
 * When the object has a `gid` set, then it is represented by the<br>
 * image of the tile with that global ID. The image alignment<br>
 * currently depends on the map orientation. In orthogonal<br>
 * orientation it's aligned to the bottom-left while in isometric<br>
 * it's aligned to the bottom-center.
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Object", propOrder = { "id", "properties", "ellipse", "polygon", "polyline", "text", "image" })
@Data
public class MapObjectData {

	/**
	 * Unique ID of the object. Each object that is placed on a map<br>
	 * gets a unique id. Even if an object was deleted, no object<br>
	 * gets the same ID. Can not be changed in Tiled Qt.<br>
	 * <br>
	 * 
	 * @since 0.11
	 * 
	 */
	@XmlAttribute(required = true, name = "id")
	protected Integer id;
	/**
	 * 
	 */
	@XmlElement(required = true, type = Properties.class)
	protected Properties properties;
	/**
	 * @since 0.9
	 * 
	 */
	@XmlElement(required = true)
	protected Ellipse ellipse;
	/**
	 * 
	 */
	@XmlElement(required = true)
	protected Polygon polygon;
	/**
	 * 
	 */
	@XmlElement(required = true)
	protected Polyline polyline;
	/**
	 * @since 1.0
	 * 
	 */
	@XmlElement(required = true)
	protected Text text;
	/**
	 * 
	 */
	@XmlElement(required = true)
	protected ImageData image;
	/**
	 * The name of the object. An arbitrary string.
	 * 
	 */
	@XmlAttribute(name = "name")
	protected String name;
	/**
	 * The type of the object. An arbitrary string.
	 * 
	 */
	@XmlAttribute(name = "type")
	protected String type;
	/**
	 * The x coordinate of the object in pixels.
	 * 
	 */
	@XmlAttribute(name = "x", required = true)

	protected double x;
	/**
	 * The y coordinate of the object in pixels.
	 * 
	 */
	@XmlAttribute(name = "y", required = true)

	protected double y;
	/**
	 * The width of the object in pixels (defaults to 0).
	 * 
	 */
	@XmlAttribute(name = "width")

	protected Double width;
	/**
	 * The height of the object in pixels (defaults to 0).
	 * 
	 */
	@XmlAttribute(name = "height")

	protected Double height;
	/**
	 * The rotation of the object in degrees clockwise (defaults to<br>
	 * 0).<br>
	 * <br>
	 * 
	 * @since 0.10
	 * 
	 */
	@XmlAttribute(name = "rotation", required = true)

	protected double rotation;
	/**
	 * An reference to a tile (optional).
	 * 
	 */
	@XmlAttribute(name = "gid")

	protected Integer gid;
	/**
	 * Whether the object is shown (1) or hidden (0). Defaults to<br>
	 * 1.<br>
	 * <br>
	 * 
	 * @since 0.9
	 * 
	 */
	@XmlAttribute(name = "visible")

	protected Boolean visible;

	public boolean isVisible() {
		return visible == null ? true : visible;
	}

}
